{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5ea05b63",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "127.0.0.1 - - [04/Jul/2022 14:32:23] \"\u001B[37mGET / HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:23] \"\u001B[37mGET /_dash-layout HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:23] \"\u001B[37mGET /_dash-dependencies HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:23] \"\u001B[37mGET /_favicon.ico?v=2.5.1 HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:23] \"\u001B[37mGET /_dash-component-suites/dash/dcc/async-dropdown.js HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:23] \"\u001B[37mPOST /_dash-update-component HTTP/1.1\u001B[0m\" 204 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:23] \"\u001B[37mPOST /_dash-update-component HTTP/1.1\u001B[0m\" 204 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:23] \"\u001B[37mPOST /_dash-update-component HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:24] \"\u001B[37mGET / HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:24] \"\u001B[37mGET /_dash-layout HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:24] \"\u001B[37mGET /_dash-dependencies HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:24] \"\u001B[37mGET /_favicon.ico?v=2.5.1 HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:24] \"\u001B[36mGET /_dash-component-suites/dash/dcc/async-dropdown.js HTTP/1.1\u001B[0m\" 304 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:24] \"\u001B[37mPOST /_dash-update-component HTTP/1.1\u001B[0m\" 204 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:24] \"\u001B[37mPOST /_dash-update-component HTTP/1.1\u001B[0m\" 204 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:24] \"\u001B[37mPOST /_dash-update-component HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:24] \"\u001B[37mGET / HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:24] \"\u001B[37mGET /_dash-layout HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:25] \"\u001B[37mGET /_dash-dependencies HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:25] \"\u001B[37mGET /_favicon.ico?v=2.5.1 HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:25] \"\u001B[36mGET /_dash-component-suites/dash/dcc/async-dropdown.js HTTP/1.1\u001B[0m\" 304 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:25] \"\u001B[37mPOST /_dash-update-component HTTP/1.1\u001B[0m\" 204 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:25] \"\u001B[37mPOST /_dash-update-component HTTP/1.1\u001B[0m\" 204 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:25] \"\u001B[37mPOST /_dash-update-component HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:25] \"\u001B[37mGET / HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:25] \"\u001B[37mGET /_dash-layout HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:25] \"\u001B[37mGET /_dash-dependencies HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:25] \"\u001B[37mGET /_favicon.ico?v=2.5.1 HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:25] \"\u001B[36mGET /_dash-component-suites/dash/dcc/async-dropdown.js HTTP/1.1\u001B[0m\" 304 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:25] \"\u001B[37mPOST /_dash-update-component HTTP/1.1\u001B[0m\" 204 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:25] \"\u001B[37mPOST /_dash-update-component HTTP/1.1\u001B[0m\" 204 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:25] \"\u001B[37mPOST /_dash-update-component HTTP/1.1\u001B[0m\" 200 -\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dash is running on http://127.0.0.1:8050/\n",
      "\n",
      "Dash is running on http://127.0.0.1:8050/\n",
      "\n",
      "Dash is running on http://127.0.0.1:8050/\n",
      "\n",
      "Dash is running on http://127.0.0.1:8050/\n",
      "\n",
      "Dash is running on http://127.0.0.1:8050/\n",
      "\n",
      "Dash is running on http://127.0.0.1:8050/\n",
      "\n",
      "Dash is running on http://127.0.0.1:8050/\n",
      "\n",
      "Dash is running on http://127.0.0.1:8050/\n",
      "\n",
      "Dash is running on http://127.0.0.1:8050/\n",
      "\n",
      "Dash is running on http://127.0.0.1:8050/\n",
      "\n",
      "Dash is running on http://127.0.0.1:8050/\n",
      "\n",
      "Dash is running on http://127.0.0.1:8050/\n",
      "\n",
      "Dash is running on http://127.0.0.1:8050/\n",
      "\n",
      " * Serving Flask app \"__main__\" (lazy loading)\r\n",
      " * Environment: production\r\n",
      "   WARNING: This is a development server. Do not use it in a production deployment.\r\n",
      "   Use a production WSGI server instead.\r\n",
      " * Debug mode: off\r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Running on http://127.0.0.1:8050/ (Press CTRL+C to quit)\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:38] \"\u001B[37mGET / HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:38] \"\u001B[37mGET /_dash-layout HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:38] \"\u001B[37mGET /_dash-dependencies HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:38] \"\u001B[37mGET /_dash-component-suites/dash/dcc/async-dropdown.js HTTP/1.1\u001B[0m\" 200 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:38] \"\u001B[37mPOST /_dash-update-component HTTP/1.1\u001B[0m\" 204 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:38] \"\u001B[37mPOST /_dash-update-component HTTP/1.1\u001B[0m\" 204 -\n",
      "127.0.0.1 - - [04/Jul/2022 14:32:39] \"\u001B[37mPOST /_dash-update-component HTTP/1.1\u001B[0m\" 200 -\n"
     ]
    }
   ],
   "source": [
    "import dash\n",
    "from dash import dcc\n",
    "from dash import html\n",
    "from dash.dependencies import Input, Output, State\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "# Initialise the app\n",
    "app = dash.Dash(__name__)\n",
    "\n",
    "server = app.server\n",
    "\n",
    "# Design the dashboard\n",
    "app.layout = html.Div(children=[\n",
    "                  html.Div(className='row',  # Define the row element\n",
    "                           children=[\n",
    "                           # Add the logo\n",
    "                           html.Img(src=\"assets/logo.svg\",  width=400, style={'display' : 'inline-block'}),\n",
    "                           html.Div(style={'text-align':'center', },\n",
    "                                    children = [\n",
    "                                        # App title\n",
    "                                        html.P('RT-DC Buffers Viscosity Calculator', style = {'font-size': '25px', 'text-align':'center'}),\n",
    "                                        html.Br(),\n",
    "                                        # Dropdown menu division (titile and design)\n",
    "                                        html.Div([\n",
    "                                              html.H2('Medium', style = {'font-size': '14px'}),\n",
    "                                              dcc.Dropdown(id=\"medium\",\n",
    "                                                           options=[\n",
    "                                                                   {'label': '0.5% MC-PBS', 'value': 'M1'},\n",
    "                                                                   {'label': '0.6% MC-PBS', 'value': 'M2'},\n",
    "                                                                   {'label': '0.84% MC-PBS', 'value': 'M3'}\n",
    "                                                                    ],\n",
    "                                                           searchable=True,\n",
    "                                                           placeholder='Select a medium',\n",
    "                                                           style={'width': '250px', \n",
    "                                                                  'color': 'blue',\n",
    "                                                                  'display' : 'inline-block'}\n",
    "                                                          )]),\n",
    "                                        # Temparature input box division (titile and design)    \n",
    "                                        html.Div([\n",
    "                                              html.H2('Temperature [°C]', style = {'font-size': '14px'}),\n",
    "                                              dcc.Input(id=\"temperature\",\n",
    "                                                        placeholder='Enter the temperature...',\n",
    "                                                        type='text',\n",
    "                                                        persistence = False,\n",
    "                                                        style={'width': '250px'}\n",
    "                                                       )]),\n",
    "                                        # Channel size input box division (titile and design)\n",
    "                                        html.Div([\n",
    "                                              html.H2('Channel size [μm]', style = {'font-size': '14px'}),\n",
    "                                              dcc.Input(id=\"channel_size\",\n",
    "                                                        placeholder='Enter the channel size...',\n",
    "                                                        type='text',\n",
    "                                                        persistence = False,\n",
    "                                                        style={'width': '250px'}\n",
    "                                                       )]),\n",
    "                                        # Flowrate input box division (titile and design)    \n",
    "                                        html.Div([\n",
    "                                              html.H2('Flowrate [μl/s]', style = {'font-size': '14px'}),\n",
    "                                              dcc.Input(id=\"flowrate\",\n",
    "                                                        placeholder='Enter the flowrate...',\n",
    "                                                        type='text',\n",
    "                                                        persistence = False,\n",
    "                                                        style={'width': '250px'}\n",
    "                                                       )]),\n",
    "                                        html.Br(), \n",
    "                                        # Store component for input storage\n",
    "                                        dcc.Store(id = 'store_viscosity'),\n",
    "                                        # Submit button design \n",
    "                                        html.Button('Submit', id='submit_button', n_clicks=0, disabled=False, \n",
    "                                                    style = {'font-size': '12px',\n",
    "                                                              'cursor': 'pointer',\n",
    "                                                              'text-align': 'center',\n",
    "                                                              'color': 'white',\n",
    "                                                            }\n",
    "                                                    ),\n",
    "                                        html.Br(), html.Br(), \n",
    "                                        # Output component to display viscosity value\n",
    "                                        html.Div(id='show_viscosity', style={'whiteSpace': 'pre-line', \n",
    "                                                                                'font-size': '20px'})\n",
    "                                        \n",
    "                                  ]),  \n",
    "                          ]) # row Div\n",
    "                    ]) # main Div\n",
    "\n",
    "# This callback function takes the inputs from\n",
    "# the html components (see the id's), compute \n",
    "# the viscosity and store it in dcc.Store \n",
    "# component as key and value pair\n",
    "@app.callback(\n",
    "    Output(\"store_viscosity\", \"data\"),\n",
    "   [Input(\"medium\", \"value\"),\n",
    "    Input(\"temperature\", \"value\"),\n",
    "    Input(\"channel_size\", \"value\"),\n",
    "    Input(\"flowrate\", \"value\")])\n",
    "\n",
    "def compute_viscosity(medium, temperature, channel_size, flow_rate):\n",
    "    features_str = [temperature, channel_size, flow_rate]\n",
    "    if len(features_str) == 3 and None not in features_str and '' not in features_str:\n",
    "\n",
    "        if medium=='M1':\n",
    "            n_MC05 = 0.0026*float(temperature) + 0.590\n",
    "            K_MC05 = 0.05*np.exp(35*(1/float(temperature)))\n",
    "            shear_rate_05 = 8*float(flow_rate)/((float(channel_size)*1e-3)**3)*(0.6671+0.2121/n_MC05)\n",
    "            viscosity = K_MC05*shear_rate_05**(n_MC05-1)*1000\n",
    "            viscosity = np.round(viscosity,2)\n",
    "            return {'viscosity' : viscosity}\n",
    "\n",
    "        if medium=='M2':\n",
    "            n_MC06 = 0.0024*float(temperature) + 0.529\n",
    "            K_MC06 = 0.15*np.exp(27.8*(1/float(temperature)))\n",
    "            shear_rate_06 = 8*float(flow_rate)/((float(channel_size)*1e-3)**3)*(0.6671+0.2121/n_MC06)\n",
    "            viscosity = K_MC06*shear_rate_06**(n_MC06-1)*1000#\n",
    "            viscosity = np.round(viscosity,2)\n",
    "            return {'viscosity' : viscosity}\n",
    "\n",
    "        if medium=='M3':\n",
    "            n_MC084 = 0.0021*float(temperature) + 0.467\n",
    "            K_MC084 = 0.40*np.exp(30.6*(1/float(temperature)))\n",
    "            shear_rate_084 = 8*float(flow_rate)/((float(channel_size)*1e-3)**3)*(0.6671+0.2121/n_MC084)\n",
    "            viscosity = K_MC084*shear_rate_084**(n_MC084-1)*1000\n",
    "            viscosity = np.round(viscosity,2)\n",
    "            return {'viscosity' : viscosity}\n",
    "\n",
    "\n",
    "    #if len(features_str) == 3 and None not in features_str and '' not in features_str:\n",
    "     #   viscosity = float(temperature) + float(channel_size)+float(flow_rate)\n",
    "      #  return {'viscosity' : viscosity}\n",
    "  \n",
    "# This call back function is activated when \n",
    "# user click on submit button. When do so, stored\n",
    "# viscosity value will be diyplayed in the output \n",
    "# component\n",
    "@app.callback(\n",
    "    Output('show_viscosity', 'children'),\n",
    "    Input('submit_button', 'n_clicks'),\n",
    "    State('store_viscosity', 'data'))\n",
    "\n",
    "def display_output(n_clicks, stored_viscosity):\n",
    "    trigger = [p['prop_id'] for p in dash.callback_context.triggered][0]\n",
    "    if stored_viscosity is not None:\n",
    "        viscosity = stored_viscosity['viscosity']\n",
    "        if 'submit_button' in trigger:\n",
    "            return 'Computed viscosity [mPa.s]: \\n{}'.format(viscosity)\n",
    "        else:\n",
    "            return dash.no_update\n",
    "    else:\n",
    "        return dash.no_update\n",
    "    \n",
    "\n",
    "# This call back function will reset the input boxes\n",
    "# as soon as user click on the submit button\n",
    "@app.callback(\n",
    "   [Output(\"temperature\", \"value\"),\n",
    "    Output(\"channel_size\", \"value\"),\n",
    "    Output(\"flowrate\", \"value\")], \n",
    "     Input('submit_button', 'n_clicks'))\n",
    "\n",
    "def reset_inputs(click):\n",
    "    trigger = [p['prop_id'] for p in dash.callback_context.triggered][0]\n",
    "    if 'submit_button' in trigger:\n",
    "        return ['']*3\n",
    "    else:\n",
    "        return dash.no_update\n",
    "\n",
    "\n",
    "# Run the app\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0d5a2177",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e391face",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}